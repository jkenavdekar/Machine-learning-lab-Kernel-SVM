setwd("~/Machine Learning A-Z (Codes and Datasets)/kernel svm")
set.seed(1234567890)
library(geosphere)
library(ggplot2)
stations <- read.csv("stations.csv")
temps <- read.csv("temps50k.csv")
st <- merge(stations,temps,by="station_number")
h_distance <- 500000
h_date <- 15
h_time <- 3
XX = subset(st, station_name == "Stockholm")
a <- 59.1833
b <- 17.9167
date <- "2020-12-10"
times <- c("04:00:00", "06:00:00", "08:00:00", "10:00:00", "12:00:00", "14:00:00",
"16:00:00", "18:00:00", "20:00:00", "22:00:00", "24:00:00")
#Q1
gaussion_distance <- function(db_point, point_intreset)
{
dist <- distHaversine(db_point, point_intreset)
return (exp(-(dist / h_distance)^2))
}
#Q2
gaussian_date <- function(db_date, point_of_intreset_date)
{
diff_date = as.numeric(abs(as.Date(db_date) - as.Date(point_of_intreset_date)))%%365
diff_date[diff_date > 182] <- 365 - diff_date
return (exp(-(diff_date / h_date)^2))
}
#Q3
gaussian_hours <- function(db_time, point_of_intreset_date)
{
diff_date <- as.numeric(difftime(point_of_intreset_date,db_time,unit = "hours"))
return (exp(-(diff_date / h_time)^2))
}
point_intreset <- c(a,b)
data_dist = st[,c("longitude", "latitude")]
gaussion_distacne_v <- gaussion_distance(data_dist, point_intreset)
gaussion_date_v <- gaussian_date(st$date, date)
time_conv <- data.frame(time=as.POSIXct(paste(Sys.Date(), st$time), format="%Y-%m-%d %H:%M:%S"))
times <- strptime( paste( Sys.Date(),times), "%Y-%m-%d %H:%M:%S")
temp <- vector(length=length(times))
temp2 <- vector(length=length(times))
for (i in 1:length(times))
{
gausian_hours <- gaussian_hours(time_conv$time, times[i])
sum_of_k <- (gaussion_distacne_v + gaussion_date_v + gausian_hours)
temp[i] <- sum((st$air_temperature * sum_of_k)) / sum(sum_of_k)
multiply_of_k <- (gaussion_distacne_v * gaussion_date_v * gausian_hours)
temp2[i] <- sum((st$air_temperature * multiply_of_k)) / sum(multiply_of_k)
}
#plot of additive kernels
plot(x=times,y=temp, type = "o" ,
main = "Temperature using Additive kernels" ,
xlab = "Time" ,
ylab = "Temperature")
#plot of multiplicative kernels
plot(x=times,y=temp2, type = "o",
main = "Temperature using Multiplicative kernels" ,
xlab = "Time" ,
ylab = "Temperature")
View(XX)
View(XX)
set.seed(1234567890)
library(geosphere)
library(ggplot2)
stations <- read.csv("stations.csv")
temps <- read.csv("temps50k.csv")
st <- merge(stations,temps,by="station_number")
h_distance <- 500000
h_date <- 15
h_time <- 3
XX = subset(st, station_name == "Stockholm")
a <- 59.342
b <- 18.0575
date <- "2011-10-27"
times <- c("04:00:00", "06:00:00", "08:00:00", "10:00:00", "12:00:00", "14:00:00",
"16:00:00", "18:00:00", "20:00:00", "22:00:00", "24:00:00")
#Q1
gaussion_distance <- function(db_point, point_intreset)
{
dist <- distHaversine(db_point, point_intreset)
return (exp(-(dist / h_distance)^2))
}
#Q2
gaussian_date <- function(db_date, point_of_intreset_date)
{
diff_date = as.numeric(abs(as.Date(db_date) - as.Date(point_of_intreset_date)))%%365
diff_date[diff_date > 182] <- 365 - diff_date
return (exp(-(diff_date / h_date)^2))
}
#Q3
gaussian_hours <- function(db_time, point_of_intreset_date)
{
diff_date <- as.numeric(difftime(point_of_intreset_date,db_time,unit = "hours"))
return (exp(-(diff_date / h_time)^2))
}
point_intreset <- c(a,b)
data_dist = st[,c("longitude", "latitude")]
gaussion_distacne_v <- gaussion_distance(data_dist, point_intreset)
gaussion_date_v <- gaussian_date(st$date, date)
time_conv <- data.frame(time=as.POSIXct(paste(Sys.Date(), st$time), format="%Y-%m-%d %H:%M:%S"))
times <- strptime( paste( Sys.Date(),times), "%Y-%m-%d %H:%M:%S")
temp <- vector(length=length(times))
temp2 <- vector(length=length(times))
for (i in 1:length(times))
{
gausian_hours <- gaussian_hours(time_conv$time, times[i])
sum_of_k <- (gaussion_distacne_v + gaussion_date_v + gausian_hours)
temp[i] <- sum((st$air_temperature * sum_of_k)) / sum(sum_of_k)
multiply_of_k <- (gaussion_distacne_v * gaussion_date_v * gausian_hours)
temp2[i] <- sum((st$air_temperature * multiply_of_k)) / sum(multiply_of_k)
}
#plot of additive kernels
plot(x=times,y=temp, type = "o" ,
main = "Temperature using Additive kernels" ,
xlab = "Time" ,
ylab = "Temperature")
#plot of multiplicative kernels
plot(x=times,y=temp2, type = "o",
main = "Temperature using Multiplicative kernels" ,
xlab = "Time" ,
ylab = "Temperature")
View(XX)
library(neuralnet)
set.seed(1234567890)
Var <- runif(500, 0, 10)
mydata <- data.frame(Var, Sin=sin(Var))
tr <- mydata[1:25,] # Training
te <- mydata[26:500,] # Test
# Random initialization of the weights in the interval [-1, 1]
winit <- runif(31, -1, 1)
#Q1
nn = neuralnet(Sin ~ Var, data = tr, hidden = 10, linear.output=T, startweights = winit)
pred = compute(nn, te)
mean(pred$net.result)
plot(nn)
library(ggplot2)
g = ggplot(te, aes(Var))
g <- g + geom_point(aes(y=Sin), colour="blue")
g <- g + geom_point(aes(y=pred$net.result), colour="red")
g
#Q2
Var <- runif(500, 0, 20)
mydata <- data.frame(Var, Sin=sin(Var))
pred = compute(nn, mydata)
g = ggplot(mydata, aes(Var))
g <- g + geom_point(aes(y=Sin), colour="blue")
g <- g + geom_point(aes(y=pred$net.result), colour="red")
g
#Q3
Var <- runif(500, 0, 10)
mydata <- data.frame(Var, Sin=sin(Var))
nn = neuralnet(Var ~ Sin, data = mydata, hidden = 4, linear.output=T)
pred = compute(nn, mydata)
g = ggplot(mydata, aes(Sin))
g <- g + geom_point(aes(y=Var), colour="blue")
g <- g + geom_point(aes(y=pred$net.result), colour="red")
g
library(neuralnet)
set.seed(1234567890)
Var <- runif(500, 0, 10)
mydata <- data.frame(Var, Sin=sin(Var))
tr <- mydata[1:25,] # Training
te <- mydata[26:500,] # Test
# Random initialization of the weights in the interval [-1, 1]
winit <- runif(31, -1, 1)
#Q1
nn = neuralnet(Sin ~ Var, data = tr, hidden = 10, linear.output=T, startweights = winit)
pred = compute(nn, te)
mean(pred$net.result)
plot(nn)
library(ggplot2)
g = ggplot(te, aes(Var))
g <- g + geom_point(aes(y=Sin), colour="blue")
g <- g + geom_point(aes(y=pred$net.result), colour="red")
g
mean(pred$net.result)
